{
  "openapi": "3.0.0",
  "info": {
    "title": "Inngest App API",
    "version": "1.0.0",
    "description": "API documentation for the Inngest app"
  },
  "servers": [
    {
      "url": "http://localhost:3001"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your bearer token in the format: Bearer {token}"
      }
    },
    "schemas": {
      "CredentialCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "type",
          "provider",
          "secret"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "enum": [
              "OAUTH",
              "API_KEY"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "GOOGLE",
              "SLACK",
              "HUBSPOT",
              "FIRECRAWL",
              "CUSTOM"
            ]
          },
          "secret": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              },
              "expiresIn": {
                "type": "number"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "config": {
            "type": "object"
          }
        }
      },
      "CredentialUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "secret": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              },
              "expiresIn": {
                "type": "number"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "config": {
            "type": "object"
          }
        }
      },
      "WorkflowInputField": {
        "type": "object",
        "required": [
          "key",
          "label",
          "type"
        ],
        "properties": {
          "key": {
            "type": "string",
            "minLength": 1
          },
          "label": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "number",
              "boolean",
              "json",
              "credential",
              "email",
              "url",
              "date",
              "time",
              "file",
              "select",
              "multiselect"
            ]
          },
          "required": {
            "type": "boolean",
            "default": false
          },
          "defaultValue": {},
          "validation": {
            "type": "object",
            "properties": {
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              },
              "pattern": {
                "type": "string"
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "WorkflowTemplateResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "category",
          "eventName"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "REPORTING",
              "DATA_PROCESSING",
              "COMMUNICATION",
              "AUTOMATION",
              "ANALYTICS",
              "INTEGRATION",
              "MONITORING",
              "CUSTOM"
            ]
          },
          "version": {
            "type": "string",
            "default": "1.0.0"
          },
          "eventName": {
            "type": "string"
          },
          "canBeScheduled": {
            "type": "boolean",
            "default": false
          },
          "requiredProviders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GOOGLE",
                "SLACK",
                "HUBSPOT",
                "FIRECRAWL",
                "CUSTOM"
              ]
            }
          },
          "inputFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowInputField"
            }
          },
          "outputSchema": {
            "type": "object"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkflowCreateRequest": {
        "type": "object",
        "required": [
          "name",
          "description",
          "workflowDefinitionId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          },
          "category": {
            "type": "string",
            "enum": [
              "REPORTING",
              "DATA_PROCESSING",
              "COMMUNICATION",
              "AUTOMATION",
              "ANALYTICS",
              "INTEGRATION",
              "MONITORING",
              "CUSTOM"
            ]
          },
          "workflowDefinitionId": {
            "type": "string",
            "minLength": 1
          },
          "available": {
            "type": "boolean",
            "default": true,
            "description": "Whether the workflow instance is available for use by the user"
          },
          "isActive": {
            "type": "boolean",
            "default": false,
            "description": "Whether the workflow is currently active/scheduled to run"
          },
          "canBeScheduled": {
            "type": "boolean",
            "default": false
          },
          "cronExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "timezone": {
            "type": "string",
            "default": "UTC"
          },
          "input": {
            "type": "object"
          },
          "credentialIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "WorkflowUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          },
          "available": {
            "type": "boolean",
            "description": "Whether the workflow instance is available for use by the user"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the workflow is currently active/scheduled to run"
          },
          "canBeScheduled": {
            "type": "boolean"
          },
          "cronExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string"
          },
          "input": {
            "type": "object"
          },
          "credentialIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WorkflowResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "enum": [
              "REPORTING",
              "DATA_PROCESSING",
              "COMMUNICATION",
              "AUTOMATION",
              "ANALYTICS",
              "INTEGRATION",
              "MONITORING",
              "CUSTOM"
            ]
          },
          "workflowDefinitionId": {
            "type": "string"
          },
          "available": {
            "type": "boolean",
            "description": "Whether the workflow instance is available for use by the user"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the workflow is currently active/scheduled to run"
          },
          "canBeScheduled": {
            "type": "boolean"
          },
          "cronExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "lastRunAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextRunAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "input": {
            "type": "object",
            "nullable": true
          },
          "eventName": {
            "type": "string"
          },
          "requiredProviders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GOOGLE",
                "SLACK",
                "HUBSPOT",
                "FIRECRAWL",
                "CUSTOM"
              ]
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credentials": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "config": {
                  "type": "object",
                  "nullable": true
                }
              }
            }
          },
          "template": {
            "$ref": "#/components/schemas/WorkflowTemplateResponse"
          }
        }
      },
      "WorkflowRunRequest": {
        "type": "object",
        "properties": {
          "input": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "WorkflowRunResponse": {
        "type": "object",
        "properties": {
          "runId": {
            "type": "string"
          },
          "workflowId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "RUNNING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "message": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "result": {
            "type": "object",
            "nullable": true
          },
          "error": {
            "type": "object",
            "nullable": true,
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {}
            }
          }
        }
      },
      "PaginationResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrev": {
            "type": "boolean"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {},
          "error": {
            "type": "object",
            "nullable": true,
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {}
            }
          }
        }
      },
      "WorkflowScheduleRequest": {
        "type": "object",
        "required": [
          "available",
          "cronExpressions"
        ],
        "properties": {
          "available": {
            "type": "boolean"
          },
          "cronExpressions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "timezone": {
            "type": "string",
            "default": "UTC"
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ]
  },
  "paths": {
    "/api/credentials/{id}": {
      "get": {
        "summary": "Get a credential",
        "description": "Returns a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single credential."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Credential not found."
          },
          "500": {
            "description": "Error getting credential."
          }
        }
      },
      "put": {
        "summary": "Update a credential that is of type ApiKey",
        "tags": [
          "Credentials"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Updates a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated credential."
          },
          "400": {
            "description": "Missing credential in request body."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error updating credentials."
          }
        }
      },
      "delete": {
        "summary": "Delete a credential",
        "description": "Deletes a single credential for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error deleting credentials."
          }
        }
      }
    },
    "/api/credentials/google/auth-url": {
      "get": {
        "summary": "Get Google OAuth URL from specified scopes",
        "tags": [
          "Google"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "scopes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "description": "Returns a Google OAuth URL for the authenticated user.",
        "responses": {
          "200": {
            "description": "A Google OAuth URL."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/credentials/google/callback": {
      "get": {
        "summary": "Google OAuth callback",
        "description": "Handles the Google OAuth callback.",
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to the integrations page."
          },
          "400": {
            "description": "Missing code or state from Google OAuth callback."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/credentials": {
      "get": {
        "summary": "Get all user credentials",
        "description": "Returns a list of all credentials for the authenticated user.",
        "responses": {
          "200": {
            "description": "A list of credentials."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error getting credentials."
          }
        }
      },
      "post": {
        "summary": "Store a new credential",
        "description": "Stores a new credential for the authenticated user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created credential."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error storing credentials."
          }
        }
      }
    },
    "/api/inngest": {
      "get": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      },
      "post": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      },
      "put": {
        "summary": "Inngest endpoint",
        "description": "Inngest endpoint."
      }
    },
    "/api/marketplace/workflows": {
      "get": {
        "summary": "Browse available workflow templates",
        "description": "Returns paginated list of workflow templates available for installation from the marketplace.",
        "tags": [
          "Marketplace"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            },
            "description": "Number of templates per page"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search templates by name or description"
          },
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "type": "string",
              "enum": [
                "GOOGLE",
                "SLACK",
                "HUBSPOT",
                "FIRECRAWL",
                "CUSTOM"
              ]
            },
            "description": "Filter by required provider"
          },
          {
            "in": "query",
            "name": "pricing",
            "schema": {
              "type": "string",
              "enum": [
                "free",
                "paid"
              ]
            },
            "description": "Filter by pricing type"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by category"
          },
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            },
            "description": "Show only featured templates"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of workflow templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "canBeScheduled": {
                                "type": "boolean"
                              },
                              "requiredProviders": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "requiredScopes": {
                                "type": "object",
                                "additionalProperties": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "description": "Required OAuth scopes per provider"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "marketplace",
                                  "custom"
                                ]
                              },
                              "pricing": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "free",
                                      "paid"
                                    ]
                                  },
                                  "price": {
                                    "type": "number",
                                    "description": "Price in cents"
                                  },
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD",
                                      "EUR",
                                      "GBP"
                                    ]
                                  },
                                  "billingPeriod": {
                                    "type": "string",
                                    "enum": [
                                      "one_time",
                                      "monthly",
                                      "yearly"
                                    ]
                                  }
                                }
                              },
                              "category": {
                                "type": "string"
                              },
                              "tags": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "featured": {
                                "type": "boolean"
                              },
                              "author": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "isInstalled": {
                                "type": "boolean"
                              },
                              "canInstall": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            },
                            "hasNext": {
                              "type": "boolean"
                            },
                            "hasPrev": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/realtime/subscription-token": {
      "post": {
        "summary": "Get realtime subscription token for a workflow",
        "description": "Returns a short-lived token to subscribe to realtime updates for a specific workflow's channel.",
        "tags": [
          "Realtime"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workflowId": {
                    "type": "string",
                    "description": "The workflow ID to subscribe to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing workflowId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User or workflow not found"
          },
          "500": {
            "description": "Failed to generate subscription token"
          }
        }
      }
    },
    "/api/webhooks": {
      "post": {
        "summary": "Clerk webhook",
        "description": "Handles Clerk webhooks.",
        "responses": {
          "200": {
            "description": "Webhook received."
          },
          "400": {
            "description": "Error verifying webhook."
          },
          "500": {
            "description": "Error processing webhook."
          }
        }
      }
    },
    "/api/workflows/{id}": {
      "get": {
        "summary": "Get a workflow",
        "description": "Returns a single workflow for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single workflow."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Workflow not found."
          },
          "500": {
            "description": "Error getting workflow."
          }
        }
      },
      "put": {
        "summary": "Update a workflow",
        "description": "Updates a single workflow for the authenticated user. Validates input against the workflow template schema.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Custom name for the workflow"
                  },
                  "description": {
                    "type": "string",
                    "description": "Workflow description"
                  },
                  "available": {
                    "type": "boolean",
                    "description": "Whether the workflow is available"
                  },
                  "input": {
                    "type": "object",
                    "description": "Workflow input parameters that will be validated against template schema"
                  },
                  "credentials": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "credentialId": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Credential IDs to associate with this workflow"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow not found"
          },
          "500": {
            "description": "Error updating workflow"
          }
        }
      },
      "delete": {
        "summary": "Delete a workflow",
        "description": "Deletes a single workflow for the authenticated user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow deleted successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error deleting workflow."
          }
        }
      }
    },
    "/api/workflows/{id}/run": {
      "post": {
        "summary": "Run a workflow immediately",
        "description": "Executes a workflow immediately by its ID for the authenticated user. Validates workflow input against the template schema. This also works for event based workflows that listen to changes in the user data.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to run"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "Workflow-specific input parameters that will be validated against the template schema"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the workflow execution"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow run successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Workflow run successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Input validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow or user not found"
          },
          "500": {
            "description": "Error running workflow"
          }
        }
      },
      "delete": {
        "summary": "Stops a workflow",
        "description": "Disables and stops a workflow by its ID for the authenticated user.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to stop"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Workflow stopped"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow or user not found"
          },
          "500": {
            "description": "Error stopping workflow or workflow is not available"
          }
        }
      }
    },
    "/api/workflows/{id}/schedule": {
      "post": {
        "summary": "Schedule a workflow",
        "description": "Enables and schedules a workflow by its ID for the authenticated user. Validates workflow input against the template schema.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to schedule"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "description": "Workflow-specific input parameters that will be validated against the template schema"
                  },
                  "cronExpression": {
                    "type": "string",
                    "description": "Optional cron expression to override the workflow's default schedule"
                  },
                  "timezone": {
                    "type": "string",
                    "default": "UTC",
                    "description": "Timezone for the schedule"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional metadata for the workflow execution"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow scheduled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Workflow scheduled successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Input validation failed or workflow cannot be scheduled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow or user not found"
          },
          "500": {
            "description": "Error scheduling workflow"
          }
        }
      },
      "delete": {
        "summary": "Stop a scheduled workflow",
        "description": "Disables and stops a scheduled workflow by its ID for the authenticated user.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow ID to stop"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Workflow stopped"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Workflow or user not found"
          },
          "500": {
            "description": "Error stopping workflow or workflow is not available"
          }
        }
      }
    },
    "/api/workflows/install/{templateId}": {
      "post": {
        "summary": "Install a workflow template",
        "description": "Creates a new workflow instance from a marketplace template for the authenticated user.",
        "tags": [
          "Workflows"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The workflow template ID to install"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Custom name for this workflow instance"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow template installed successfully"
          },
          "400": {
            "description": "Invalid template or validation failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Template not found or user not found"
          },
          "409": {
            "description": "Template already installed"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/workflows": {
      "get": {
        "summary": "Get user's workflows",
        "description": "Returns a list of all workflows for the authenticated user.",
        "tags": [
          "Workflows"
        ],
        "responses": {
          "200": {
            "description": "List of user workflows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "available": {
                            "type": "boolean"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "IDLE",
                              "RUNNING",
                              "COMPLETED",
                              "FAILED",
                              "CANCELLED"
                            ]
                          },
                          "canBeScheduled": {
                            "type": "boolean"
                          },
                          "eventName": {
                            "type": "string"
                          },
                          "cronExpressions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "timezone": {
                            "type": "string"
                          },
                          "lastRunAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "nextRunAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "input": {
                            "type": "object"
                          },
                          "requiredProviders": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "credentials": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                },
                                "provider": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "tags": []
}