generator client {
  provider = "prisma-client-js"
  output   = "src/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DATABASE_URL") // uses a direct connection
}

// --- Models ---
// Maps to the 'users' table
model User {
  id       String @id @default(cuid())
  clerk_id String @unique
  email    String @unique

  // Other user fields can go here, like name, password, etc.
  name String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  phone_number String? @unique /// @encrypted

  role String @default("user")

  // The user's preferred language, e.g., 'en', 'es', 'fr',
  language String @default("en")

  is_active Boolean @default(true)

  // A list of all workflows belonging to this user.
  workflows Workflow[]

  // A list of all credentials belonging to this user.
  credentials Credential[]

  // Workflow run history
  workflowRuns WorkflowRun[]

  // Client branding configuration
  clientBranding ClientBranding?

  // Service requests from this user
  serviceRequests ServiceRequest[]

  // Enhanced dashboard relations
  automationOpportunities AutomationOpportunity[]
  executiveReports        ExecutiveReport[]

  @@map("users")
}

enum CredentialType {
  OAUTH
  API_KEY
  // Add more general types here if needed
}

enum Provider {
  GOOGLE
  SLACK
  HUBSPOT
  FIRECRAWL
  INSTAGRAM
  CUSTOM
}

enum WorkflowStatus {
  IDLE
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum RunStatus {
  STARTED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model Credential {
  id       String         @id @default(cuid())
  name     String // e.g., "Lab API Key" or "CRM Access"
  type     CredentialType
  provider Provider

  secret    String? /// @encrypted - Stored as encrypted JSON string
  config    Json? // optional extra data (endpoint, token expiry)
  expiresIn DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // This is the new field to reference the join table.
  workflowCredentials WorkflowCredential[]

  @@unique([userId, name])
  @@index([userId])
  @@map("credentials")
}

// A workflow represents a user's entire configuration.
model Workflow {
  id   String @id @default(cuid())
  // The name of the workflow, must match the inngest function id
  name String

  templateId String

  // A short description of the workflow.
  description String?

  // Whether the workflow instance is available for use by the user
  available Boolean @default(true)

  // Current status of the workflow
  status WorkflowStatus @default(IDLE)

  canBeScheduled Boolean @default(false)

  idempotencyKey String? @default(cuid())

  cronExpressions String[]  @default([]) // Multiple schedules  e.g., ["0 9 * * *", "0 12 * * *"]
  timezone        String?   @default("UTC") // e.g., "America/New_York"
  lastRunAt       DateTime?
  nextRunAt       DateTime?

  fields Json?
  input  Json?

  // The name of the event or the cron value for the schedule eg. "TZ=Europe/Paris 0 12 * * 5"
  eventName String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // The foreign key linking this workflow to a specific user.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  requiredProviders Provider[] @default([])
  requiredScopes    Json? // Stores scopes per provider as Record<Provider, string[]>

  version String? // Version of the workflow template used

  config Json?

  // This is the new field to reference the join table.
  workflowCredentials WorkflowCredential[]

  // Workflow run history
  workflowRuns WorkflowRun[]

  // Automation metrics for this workflow
  automationMetrics AutomationMetrics[]

  // Enhanced dashboard relations
  businessOutcomes  BusinessOutcome[]
  efficiencyMetrics EfficiencyMetric[]
  workflowHealth    WorkflowHealth?

  @@index([userId])
  @@map("workflows")
}

// This model acts as a join table for the many-to-many relationship
// between Workflow and Credential.
model WorkflowCredential {
  // Composite ID to uniquely identify the relationship
  workflowId   String
  credentialId String

  // Foreign keys linking to the Workflow and Credential models
  workflow   Workflow   @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  credential Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@id([workflowId, credentialId])
  @@map("workflow_credentials")
}

// Stores individual workflow run instances and their realtime data
model WorkflowRun {
  id String @id @default(cuid())

  // Inngest run ID for correlation
  inngestRunId String @unique

  idempotencyKey String? @unique

  // Status of this specific run
  status RunStatus @default(STARTED)

  // Timestamps
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Run metadata
  input  Json? // Input parameters for this run
  output Json? // Final output/result
  error  String? // Error message if failed

  // Realtime data storage
  realtimeData Json[] @default([]) // Array of realtime messages/updates

  version String? // Version of the workflow template used

  // Foreign key to workflow
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // Foreign key to user (denormalized for easier queries)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([workflowId])
  @@index([userId])
  @@index([inngestRunId])
  @@index([status])
  @@map("workflow_runs")
}

model WorkflowTemplate {
  id                String     @id
  name              String
  description       String
  eventName         String     @unique
  canBeScheduled    Boolean
  requiredProviders Provider[] @default([])
  requiredScopes    Json?
  fields            Json?
  restrictedToUsers String[]
  tags              String[]
  version           String

  @@map("workflow_templates")
}

// Client branding configuration for white-labeled dashboard
model ClientBranding {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyName    String
  logoUrl        String?
  primaryColor   String?
  secondaryColor String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_branding")
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  SUBMITTED
  REVIEWED
  MEETING_SCHEDULED
  PROPOSAL_SENT
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Service request tracking for new automation requests
model ServiceRequest {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title           String
  description     String
  businessProcess String // Current manual process
  desiredOutcome  String // What they want to achieve
  priority        RequestPriority @default(MEDIUM)
  status          RequestStatus   @default(SUBMITTED)

  // Meeting scheduling
  meetingScheduled Boolean   @default(false)
  meetingUrl       String?
  meetingDate      DateTime?

  // Proposal tracking
  proposalSent     Boolean  @default(false)
  proposalAccepted Boolean?
  estimatedHours   Int?
  quotedPrice      Decimal?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("service_requests")
}

// Performance metrics storage for ROI calculations
model AutomationMetrics {
  id         String   @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  date         DateTime @db.Date
  runsCount    Int      @default(0)
  successCount Int      @default(0)
  failureCount Int      @default(0)
  avgDuration  Int? // milliseconds

  // ROI metrics
  timeSavedMinutes Int? // estimated time saved
  errorsPrevented  Int? // estimated errors prevented
  costSavings      Decimal? // calculated cost savings

  createdAt DateTime @default(now())

  @@unique([workflowId, date])
  @@index([workflowId])
  @@index([date])
  @@map("automation_metrics")
}

enum BusinessOutcomeType {
  LEADS_GENERATED
  ORDERS_PROCESSED
  TICKETS_RESOLVED
  CUSTOM
}

enum OpportunityCategory {
  DATA_ENTRY
  COMMUNICATION
  REPORTING
  INTEGRATION
}

enum OpportunityStatus {
  IDENTIFIED
  DISMISSED
  REQUESTED
  IMPLEMENTED
}

enum HealthRecommendationType {
  PERFORMANCE
  RELIABILITY
  OPTIMIZATION
}

enum HealthRecommendationPriority {
  LOW
  MEDIUM
  HIGH
}

enum ImplementationEffort {
  LOW
  MEDIUM
  HIGH
}

// Business outcome tracking for workflows
model BusinessOutcome {
  id          String              @id @default(cuid())
  workflowId  String
  workflow    Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  outcomeType BusinessOutcomeType
  value       Float
  timestamp   DateTime            @default(now())
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workflowId])
  @@index([timestamp])
  @@index([outcomeType])
  @@map("business_outcomes")
}

// Efficiency metrics comparing before/after automation
model EfficiencyMetric {
  id         String   @id @default(cuid())
  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  period     String // e.g., "2024-Q1", "2024-01"

  // Before automation metrics
  beforeTimeSpent  Float? // hours
  beforeErrorRate  Float? // percentage
  beforeThroughput Float? // items per hour

  // After automation metrics
  afterTimeSpent  Float? // hours
  afterErrorRate  Float? // percentage
  afterThroughput Float? // items per hour

  // Calculated improvements
  timeReduction      Float? // percentage
  errorReduction     Float? // percentage
  throughputIncrease Float? // percentage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workflowId, period])
  @@index([workflowId])
  @@index([period])
  @@map("efficiency_metrics")
}

// Automation opportunity identification and tracking
model AutomationOpportunity {
  id              String              @id @default(cuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  description     String
  category        OpportunityCategory
  impactScore     Int // 1-10
  difficultyScore Int // 1-10

  // ROI estimates
  timeSavingsHours    Float?
  costSavings         Decimal?
  paybackPeriodMonths Int?

  requiredIntegrations String[]          @default([])
  status               OpportunityStatus @default(IDENTIFIED)
  identifiedAt         DateTime          @default(now())

  // Learning and feedback
  dismissalReason     String?
  implementationNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([impactScore])
  @@index([identifiedAt])
  @@map("automation_opportunities")
}

// Workflow health scoring and monitoring
model WorkflowHealth {
  id             String   @id @default(cuid())
  workflowId     String   @unique
  workflow       Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  healthScore    Int // 0-100
  lastCalculated DateTime @default(now())

  // Health factors
  successRate      Float?
  performanceTrend Float?
  errorPattern     Float?
  businessImpact   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Related recommendations and alerts
  recommendations HealthRecommendation[]
  alerts          HealthAlert[]

  @@index([workflowId])
  @@index([healthScore])
  @@index([lastCalculated])
  @@map("workflow_health")
}

// Health improvement recommendations
model HealthRecommendation {
  id                   String                       @id @default(cuid())
  workflowHealthId     String
  workflowHealth       WorkflowHealth               @relation(fields: [workflowHealthId], references: [id], onDelete: Cascade)
  type                 HealthRecommendationType
  priority             HealthRecommendationPriority
  title                String
  description          String
  estimatedImpact      String
  implementationEffort ImplementationEffort

  // Tracking
  isImplemented      Boolean   @default(false)
  implementedAt      DateTime?
  effectivenessScore Int? // 1-10, measured after implementation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workflowHealthId])
  @@index([priority])
  @@index([isImplemented])
  @@map("health_recommendations")
}

// Health alerts for declining performance
model HealthAlert {
  id               String         @id @default(cuid())
  workflowHealthId String
  workflowHealth   WorkflowHealth @relation(fields: [workflowHealthId], references: [id], onDelete: Cascade)
  alertType        String // e.g., "performance_decline", "error_spike"
  severity         String // "low", "medium", "high", "critical"
  message          String
  threshold        Float? // The threshold that triggered this alert
  currentValue     Float? // The current value that exceeded the threshold

  isAcknowledged Boolean   @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String? // User ID who acknowledged

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workflowHealthId])
  @@index([severity])
  @@index([isAcknowledged])
  @@index([createdAt])
  @@map("health_alerts")
}

// Executive report generation and sharing
model ExecutiveReport {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  periodStart DateTime
  periodEnd   DateTime
  format      String // "pdf", "pptx", "web"

  // Report content
  sections Json // Array of report sections

  // Branding
  companyName  String?
  logoUrl      String?
  primaryColor String?

  // Sharing
  shareableLink String?
  linkExpiresAt DateTime?
  isPublic      Boolean   @default(false)

  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([generatedAt])
  @@index([shareableLink])
  @@map("executive_reports")
}
